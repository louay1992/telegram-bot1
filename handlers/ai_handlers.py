"""
ูุนุงูุฌุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู - ุชุฏูุฑ ุชูุงุนูุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู
"""

import logging
import os
import re
import uuid
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple, Union

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)

from utils.database import is_admin, search_notifications_by_phone, add_notification

# ุงูุชุญูู ููุง ุฅุฐุง ูุงูุช ููุชุจุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูุชุงุญุฉ
try:
    import openai
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

try:
    import anthropic
    from anthropic import Anthropic
    ANTHROPIC_AVAILABLE = True
except ImportError:
    ANTHROPIC_AVAILABLE = False

# ุฅุนุฏุงุฏ ุงูุณุฌู
logger = logging.getLogger(__name__)

# ุงููุฌูุฏ ุงูุญุงูู
current_dir = Path(__file__).parent.parent.absolute()
IMAGES_DIR = current_dir / "data" / "images"
TEMP_MEDIA_DIR = current_dir / "temp_media"

# ุงูุชุฃูุฏ ูู ูุฌูุฏ ุงููุฌูุฏุงุช ุงููุงุฒูุฉ
IMAGES_DIR.mkdir(exist_ok=True, parents=True)
TEMP_MEDIA_DIR.mkdir(exist_ok=True, parents=True)

# ุงูุญุตูู ุนูู ููุงุชูุญ API ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
ANTHROPIC_API_KEY = os.environ.get("ANTHROPIC_API_KEY")

# ูุนุฑููุงุช ุญุงูุงุช ุงููุญุงุฏุซุฉ
(
    WAITING_FOR_CHAT,
    WAITING_FOR_IMAGE,
    WAITING_FOR_EXTRACTION_CONFIRMATION,
) = range(3)

def is_ai_available() -> bool:
    """
    ุงูุชุญูู ููุง ุฅุฐุง ูุงูุช ููุฒุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูุชุงุญุฉ
    
    ุงูุนุงุฆุฏ:
        True ุฅุฐุง ูุงูุช ููุฒุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูุชุงุญุฉุ False ุฎูุงู ุฐูู
    """
    return (OPENAI_AVAILABLE and OPENAI_API_KEY) or (ANTHROPIC_AVAILABLE and ANTHROPIC_API_KEY)

def get_openai_client() -> Optional[Any]:
    """
    ุงูุญุตูู ุนูู ุนููู OpenAI
    
    ุงูุนุงุฆุฏ:
        ุนููู OpenAI ุฅุฐุง ูุงู ูุชุงุญุงูุ None ุฎูุงู ุฐูู
    """
    if OPENAI_AVAILABLE and OPENAI_API_KEY:
        try:
            return OpenAI(api_key=OPENAI_API_KEY)
        except Exception as e:
            logger.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุนููู OpenAI: {e}")
    
    return None

def get_anthropic_client() -> Optional[Any]:
    """
    ุงูุญุตูู ุนูู ุนููู Anthropic
    
    ุงูุนุงุฆุฏ:
        ุนููู Anthropic ุฅุฐุง ูุงู ูุชุงุญุงูุ None ุฎูุงู ุฐูู
    """
    if ANTHROPIC_AVAILABLE and ANTHROPIC_API_KEY:
        try:
            return Anthropic(api_key=ANTHROPIC_API_KEY)
        except Exception as e:
            logger.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุนููู Anthropic: {e}")
    
    return None

async def ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ูุนุงูุฌุฉ ุฃูุฑ ุงูุฐูุงุก ุงูุงุตุทูุงุนู /ai"""
    if not is_ai_available():
        await update.message.reply_text(
            "ุนุฐุฑุงูุ ููุฒุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุบูุฑ ูุชุงุญุฉ ุญุงููุงู. ุงูุฑุฌุงุก ุงูุชุญูู ูู ุชูููู ููุงุชูุญ API."
        )
        return ConversationHandler.END
    
    # ุฅูุดุงุก ููุญุฉ ุชุญูู ุงูุฐูุงุก ุงูุงุตุทูุงุนู
    keyboard = [
        [
            InlineKeyboardButton("๐ฌ ูุญุงุฏุซุฉ ุฐููุฉ", callback_data="ai_chat"),
            InlineKeyboardButton("๐ผ๏ธ ุชุญููู ุตูุฑุฉ", callback_data="ai_image"),
        ],
        [
            InlineKeyboardButton("โ ุฅูุบุงุก", callback_data="ai_cancel"),
        ],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "ูุฑุญุจุงู ุจู ูู ูุงุฌูุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู! ุงูุฑุฌุงุก ุงุฎุชูุงุฑ ุฃุญุฏ ุงูุฎูุงุฑุงุช ุฃุฏูุงู:",
        reply_markup=reply_markup,
    )
    
    # ุชููุฆุฉ ุณูุงู ุงููุญุงุฏุซุฉ
    context.user_data["ai_mode"] = None
    context.user_data["ai_messages"] = []
    
    return WAITING_FOR_CHAT

async def handle_ai_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ูุนุงูุฌุฉ ุงุณุชุนูุงูุงุช ุฃุฒุฑุงุฑ ุงูุฐูุงุก ุงูุงุตุทูุงุนู"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "ai_chat":
        # ุจุฏุก ูุญุงุฏุซุฉ ุฐููุฉ
        await query.edit_message_text(
            "ุฃุฑุณู ูู ุฑุณุงูุฉ ูุณุฃุฑุฏ ุนููู ุจุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู.\n"
            "ููููู ุงุณุชุฎุฏุงู ูุฐู ุงูููุฒุฉ ููุงุณุชูุณุงุฑ ุนู ุงูุดุญูุงุช ุฃู ุทูุจ ูุนูููุงุช.\n\n"
            "ุฃุฑุณู /cancel ููุฅูุบุงุก."
        )
        context.user_data["ai_mode"] = "chat"
        return WAITING_FOR_CHAT
    
    elif query.data == "ai_image":
        # ุจุฏุก ุชุญููู ุตูุฑุฉ
        await query.edit_message_text(
            "ุงูุฑุฌุงุก ุฅุฑุณุงู ุตูุฑุฉ ุงูุดุญูุฉ ูุชุญููููุง ุจุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู.\n"
            "ุณุฃุญุงูู ุงุณุชุฎุฑุงุฌ ุงููุนูููุงุช ุงููููุฉ ูุซู ุงุณู ุงูุนููู ูุฑูู ุงููุงุชู ูุชูุงุตูู ุงูุดุญูุฉ.\n\n"
            "ุฃุฑุณู /cancel ููุฅูุบุงุก."
        )
        context.user_data["ai_mode"] = "image"
        return WAITING_FOR_IMAGE
    
    elif query.data == "ai_cancel":
        # ุฅูุบุงุก ุงูุฐูุงุก ุงูุงุตุทูุงุนู
        await query.edit_message_text(
            "ุชู ุฅูุบุงุก ุนูููุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู."
        )
        return ConversationHandler.END
    
    elif query.data.startswith("extract_"):
        # ูุนุงูุฌุฉ ุชุฃููุฏ ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ุงูุดุญูุฉ
        parts = query.data.split("_")
        if len(parts) >= 3 and parts[1] == "confirm":
            # ุฅูุดุงุก ุฅุดุนุงุฑ ุฌุฏูุฏ ูู ุงูุจูุงูุงุช ุงููุณุชุฎุฑุฌุฉ
            extracted_data = context.user_data.get("extracted_data", {})
            customer_name = extracted_data.get("customer_name", "")
            phone_number = extracted_data.get("phone_number", "")
            image_path = context.user_data.get("image_path", "")
            days = 3  # ูููุฉ ุงูุชุฑุงุถูุฉ
            
            if customer_name and phone_number and image_path:
                notification = add_notification(
                    customer_name=customer_name,
                    phone_number=phone_number,
                    image_path=image_path,
                    reminder_days=days
                )
                
                await query.edit_message_text(
                    f"ุชู ุฅูุดุงุก ุฅุดุนุงุฑ ุฌุฏูุฏ ุจูุฌุงุญ!\n\n"
                    f"ุงูุงุณู: {notification['customer_name']}\n"
                    f"ุงููุงุชู: {notification['phone_number']}\n"
                    f"ุฑูุฒ ุงูุฅุดุนุงุฑ: {notification['id'][:8]}\n"
                    f"ุงูุชุฐููุฑ ุจุนุฏ: {days} ููู"
                )
            else:
                await query.edit_message_text(
                    "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุงูุฅุดุนุงุฑ. ุงูุฑุฌุงุก ุงูุชุญูู ูู ุงูุจูุงูุงุช ุงููุณุชุฎุฑุฌุฉ."
                )
        
        return ConversationHandler.END
    
    return WAITING_FOR_CHAT

async def handle_chat_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ูุนุงูุฌุฉ ุฑุณุงุฆู ุงููุญุงุฏุซุฉ ุงูุฐููุฉ"""
    if context.user_data.get("ai_mode") != "chat":
        return WAITING_FOR_CHAT
    
    user_message = update.message.text
    
    # ุฃุถู ุฑุณุงูุฉ ุงููุณุชุฎุฏู ุฅูู ุณูุงู ุงููุญุงุฏุซุฉ
    messages = context.user_data.get("ai_messages", [])
    messages.append({"role": "user", "content": user_message})
    
    # ุฅุฑุณุงู ูุคุดุฑ ุงููุชุงุจุฉ
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id,
        action="typing"
    )
    
    # ูุญุต ุฑุณุงูุฉ ุงููุณุชุฎุฏู ุจุญุซูุง ุนู ุฃุฑูุงู ููุงุชู
    phone_numbers = extract_phone_numbers(user_message)
    
    if phone_numbers:
        # ุงูุจุญุซ ุนู ุงูุฅุดุนุงุฑุงุช ุจูุงุณุทุฉ ุฑูู ุงููุงุชู
        results = []
        for phone in phone_numbers:
            results.extend(search_notifications_by_phone(phone))
        
        if results:
            notification_info = "ูุฌุฏุช ุจุนุถ ุงูุฅุดุนุงุฑุงุช ุงููุทุงุจูุฉ ูุฑูู ุงููุงุชู ุงููุฐููุฑ:\n\n"
            
            for i, notification in enumerate(results, start=1):
                notification_info += f"{i}. ุงุณู ุงูุนููู: {notification['customer_name']}\n"
                notification_info += f"   ุฑูู ุงููุงุชู: {notification['phone_number']}\n"
                notification_info += f"   ุฑูุฒ ุงูุฅุดุนุงุฑ: {notification['id'][:8]}\n\n"
            
            # ุฅุฑุณุงู ุฑุฏ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูุน ูุนูููุงุช ุงูุฅุดุนุงุฑุงุช
            ai_response = f"ุฃุฑู ุฃูู ุชุจุญุซ ุนู ูุนูููุงุช ูุฑุชุจุทุฉ ุจุฑูู ูุงุชู. {notification_info}"
            await update.message.reply_text(ai_response)
            
            # ุฅุฑุณุงู ุตูุฑ ุงูุฅุดุนุงุฑุงุช
            for notification in results:
                try:
                    with open(f"{current_dir}/{notification['image_path']}", "rb") as image_file:
                        await context.bot.send_photo(
                            chat_id=update.effective_chat.id,
                            photo=image_file,
                            caption=f"ุตูุฑุฉ ุงูุฅุดุนุงุฑ ูู {notification['customer_name']} ({notification['id'][:8]})"
                        )
                except Exception as e:
                    logger.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅุฑุณุงู ุตูุฑุฉ ุงูุฅุดุนุงุฑ: {e}")
            
            # ุฃุถู ุฑุฏ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุฅูู ุณูุงู ุงููุญุงุฏุซุฉ
            messages.append({"role": "assistant", "content": ai_response})
            context.user_data["ai_messages"] = messages
            
            return WAITING_FOR_CHAT
    
    # ุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ููุฑุฏ
    ai_response = await generate_ai_response(user_message, messages)
    
    # ุฅุฑุณุงู ุฑุฏ ุงูุฐูุงุก ุงูุงุตุทูุงุนู
    await update.message.reply_text(ai_response)
    
    # ุฃุถู ุฑุฏ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุฅูู ุณูุงู ุงููุญุงุฏุซุฉ
    messages.append({"role": "assistant", "content": ai_response})
    context.user_data["ai_messages"] = messages
    
    return WAITING_FOR_CHAT

async def handle_image_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ูุนุงูุฌุฉ ุฑุณุงุฆู ุชุญููู ุงูุตูุฑ"""
    if context.user_data.get("ai_mode") != "image":
        return WAITING_FOR_CHAT
    
    # ุงูุญุตูู ุนูู ุฃูุจุฑ ูุณุฎุฉ ูู ุงูุตูุฑุฉ
    photo = update.message.photo[-1]
    
    # ุฅูุดุงุก ูุนุฑูู ูุฑูุฏ ููุตูุฑุฉ
    file_id = photo.file_id
    
    # ุชุญููู ุงูุตูุฑุฉ
    TEMP_MEDIA_DIR.mkdir(exist_ok=True, parents=True)
    file = await context.bot.get_file(file_id)
    temp_image_path = f"temp_media/{file_id}.jpg"
    await file.download_to_drive(f"{current_dir}/{temp_image_path}")
    
    # ุญูุธ ูุณุงุฑ ุงูุตูุฑุฉ ูุงุณุชุฎุฏุงูู ูุงุญููุง
    context.user_data["temp_image_path"] = temp_image_path
    
    # ุฅุฑุณุงู ูุคุดุฑ ุงููุชุงุจุฉ
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id,
        action="typing"
    )
    
    # ุชุญููู ุงูุตูุฑุฉ ุจุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู
    analysis_result = await analyze_image(f"{current_dir}/{temp_image_path}")
    
    # ุงุณุชุฎุฑุงุฌ ุงููุนูููุงุช ุงููููุฉ
    extracted_data = extract_shipping_info(analysis_result)
    
    # ุญูุธ ุงูุจูุงูุงุช ุงููุณุชุฎุฑุฌุฉ
    context.user_data["extracted_data"] = extracted_data
    
    # ุฅูุดุงุก ูุณุฎุฉ ุฏุงุฆูุฉ ูู ุงูุตูุฑุฉ
    if extracted_data.get("customer_name") and extracted_data.get("phone_number"):
        IMAGES_DIR.mkdir(exist_ok=True, parents=True)
        image_uuid = str(uuid.uuid4())
        image_path = f"data/images/{image_uuid}.jpg"
        
        # ูุณุฎ ุงูุตูุฑุฉ ูู ุงููุฌูุฏ ุงููุคูุช ุฅูู ูุฌูุฏ ุงูุตูุฑ
        import shutil
        shutil.copy(f"{current_dir}/{temp_image_path}", f"{current_dir}/{image_path}")
        
        # ุญูุธ ูุณุงุฑ ุงูุตูุฑุฉ ุงูุฏุงุฆู
        context.user_data["image_path"] = image_path
    
    # ุฅุฑุณุงู ุงูุชุญููู
    if extracted_data:
        message = "ุชุญููู ุงูุตูุฑุฉ:\n\n"
        
        if "customer_name" in extracted_data:
            message += f"๐ง ุงุณู ุงูุนููู: {extracted_data['customer_name']}\n"
        
        if "phone_number" in extracted_data:
            message += f"๐ฑ ุฑูู ุงููุงุชู: {extracted_data['phone_number']}\n"
        
        if "shipping_date" in extracted_data:
            message += f"๐ ุชุงุฑูุฎ ุงูุดุญู: {extracted_data['shipping_date']}\n"
        
        if "destination" in extracted_data:
            message += f"๐ ุงููุฌูุฉ: {extracted_data['destination']}\n"
        
        if "value" in extracted_data:
            message += f"๐ฐ ูููุฉ ุงูุดุญูุฉ: {extracted_data['value']}\n"
        
        message += f"\nุงูุชุญููู ุงููุงูู:\n{analysis_result}"
        
        # ุฅูุดุงุก ุฃุฒุฑุงุฑ ุฅุฌุฑุงุกุงุช
        keyboard = []
        
        if extracted_data.get("customer_name") and extracted_data.get("phone_number"):
            keyboard.append([
                InlineKeyboardButton("โ ุฅูุดุงุก ุฅุดุนุงุฑ ูู ูุฐู ุงูุจูุงูุงุช", callback_data="extract_confirm_1")
            ])
        
        keyboard.append([
            InlineKeyboardButton("โ ุฅูุบุงุก", callback_data="ai_cancel")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup)
        
        return WAITING_FOR_EXTRACTION_CONFIRMATION
    else:
        await update.message.reply_text(
            "ุนุฐุฑุงูุ ูู ุฃุชููู ูู ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ูููุฏุฉ ูู ูุฐู ุงูุตูุฑุฉ.\n"
            "ุงูุฑุฌุงุก ุงูุชุฃูุฏ ูู ุฃู ุงูุตูุฑุฉ ุชุญุชูู ุนูู ูุนูููุงุช ุดุญูุฉ ูุงุถุญุฉ ูุฅุฑุณุงููุง ูุฑุฉ ุฃุฎุฑู."
        )
        
        return WAITING_FOR_IMAGE

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุฅูุบุงุก ุงููุญุงุฏุซุฉ ุงูุญุงููุฉ"""
    await update.message.reply_text(
        "ุชู ุฅูุบุงุก ุนูููุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู."
    )
    
    # ูุณุญ ุณูุงู ุงููุญุงุฏุซุฉ
    if "ai_mode" in context.user_data:
        del context.user_data["ai_mode"]
    
    if "ai_messages" in context.user_data:
        del context.user_data["ai_messages"]
    
    return ConversationHandler.END

async def generate_ai_response(user_message: str, messages: List[Dict[str, str]]) -> str:
    """
    ุชูููุฏ ุฑุฏ ุจุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู
    
    ุงููุนููุงุช:
        user_message: ุฑุณุงูุฉ ุงููุณุชุฎุฏู
        messages: ุณุฌู ุงููุญุงุฏุซุฉ
        
    ุงูุนุงุฆุฏ:
        ุฑุฏ ุงูุฐูุงุก ุงูุงุตุทูุงุนู
    """
    try:
        # ูุญุงููุฉ ุงุณุชุฎุฏุงู OpenAI ุฃููุงู
        openai_client = get_openai_client()
        if openai_client:
            try:
                # ุชุญููู ุงููุญุงุฏุซุฉ ุฅูู ุชูุณูู OpenAI
                openai_messages = [{"role": msg["role"], "content": msg["content"]} for msg in messages[-5:]]
                
                response = openai_client.chat.completions.create(
                    model="gpt-4o",  # ุงุณุชุฎุฏุงู ุฃุญุฏุซ ูููุฐุฌ
                    messages=openai_messages,
                    max_tokens=500,
                    temperature=0.7
                )
                
                return response.choices[0].message.content
            except Exception as e:
                logger.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงุณุชุฎุฏุงู OpenAI: {e}")
        
        # ุฅุฐุง ูุดู OpenAIุ ุฌุฑุจ Anthropic
        anthropic_client = get_anthropic_client()
        if anthropic_client:
            try:
                # ุชุญููู ุงููุญุงุฏุซุฉ ุฅูู ุชูุณูู Anthropic
                anthropic_messages = []
                for msg in messages[-5:]:
                    anthropic_messages.append({"role": msg["role"], "content": msg["content"]})
                
                response = anthropic_client.messages.create(
                    model="claude-3-5-sonnet-20241022",  # ุงุณุชุฎุฏุงู ุฃุญุฏุซ ูููุฐุฌ
                    max_tokens=500,
                    temperature=0.7,
                    messages=anthropic_messages
                )
                
                return response.content[0].text
            except Exception as e:
                logger.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงุณุชุฎุฏุงู Anthropic: {e}")
        
        # ุฅุฐุง ูุดูุช ุฌููุน ุงููุญุงููุงุชุ ุฃุฑุฌุน ุฑุณุงูุฉ ุงูุชุฑุงุถูุฉ
        return "ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชูููุฏ ุงูุฑุฏ. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ูุงุญูุงู."
    
    except Exception as e:
        logger.error(f"ุญุฏุซ ุฎุทุฃ ุนุงู ุฃุซูุงุก ุชูููุฏ ุฑุฏ ุงูุฐูุงุก ุงูุงุตุทูุงุนู: {e}")
        return "ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุทูุจู. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ูุงุญูุงู."

async def analyze_image(image_path: str) -> str:
    """
    ุชุญููู ุตูุฑุฉ ุจุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู
    
    ุงููุนููุงุช:
        image_path: ูุณุงุฑ ุงูุตูุฑุฉ
        
    ุงูุนุงุฆุฏ:
        ูุชูุฌุฉ ุงูุชุญููู
    """
    try:
        # ูุญุงููุฉ ุงุณุชุฎุฏุงู OpenAI Vision ุฃููุงู
        openai_client = get_openai_client()
        if openai_client:
            try:
                import base64
                
                # ุชุญููู ุงูุตูุฑุฉ ุฅูู base64
                with open(image_path, "rb") as image_file:
                    base64_image = base64.b64encode(image_file.read()).decode('utf-8')
                
                response = openai_client.chat.completions.create(
                    model="gpt-4o",  # ุงุณุชุฎุฏุงู ุฃุญุฏุซ ูููุฐุฌ
                    messages=[
                        {
                            "role": "system",
                            "content": (
                                "ุฃูุช ูุญูู ุดุญูุงุช ุฎุจูุฑ. ูู ุจุชุญููู ุตูุฑุฉ ุงูุดุญูุฉ ูุงุณุชุฎุฑุงุฌ ุงููุนูููุงุช ุงููููุฉ ุงูุชุงููุฉ:\n"
                                "1. ุงุณู ุงูุนููู\n"
                                "2. ุฑูู ุงููุงุชู\n"
                                "3. ุชุงุฑูุฎ ุงูุดุญู\n"
                                "4. ูุฌูุฉ ุงูุดุญูุฉ\n"
                                "5. ูููุฉ ุงูุดุญูุฉ\n\n"
                                "ูุฏู ุชุญูููุงู ููุตูุงู ููุญุชูู ุงูุตูุฑุฉ. ุฑูุฒ ุนูู ุงููุนูููุงุช ุงููุชุนููุฉ ุจุงูุดุญูุฉ."
                            )
                        },
                        {
                            "role": "user",
                            "content": [
                                {
                                    "type": "text",
                                    "text": "ูู ุจุชุญููู ูุฐู ุงูุตูุฑุฉ ูุญุฏุฏ ุงุณู ุงูุนููู ูุฑูู ุงููุงุชู ูุชุงุฑูุฎ ุงูุดุญู ูุงููุฌูุฉ ูุงููููุฉ ุฅู ูุฌุฏุช."
                                },
                                {
                                    "type": "image_url",
                                    "image_url": {
                                        "url": f"data:image/jpeg;base64,{base64_image}"
                                    }
                                }
                            ]
                        }
                    ],
                    max_tokens=1000
                )
                
                return response.choices[0].message.content
            except Exception as e:
                logger.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงุณุชุฎุฏุงู OpenAI Vision: {e}")
        
        # ุฅุฐุง ูุดู OpenAIุ ุฌุฑุจ Anthropic
        anthropic_client = get_anthropic_client()
        if anthropic_client:
            try:
                import base64
                
                # ุชุญููู ุงูุตูุฑุฉ ุฅูู base64
                with open(image_path, "rb") as image_file:
                    base64_image = base64.b64encode(image_file.read()).decode('utf-8')
                
                response = anthropic_client.messages.create(
                    model="claude-3-5-sonnet-20241022",  # ุงุณุชุฎุฏุงู ุฃุญุฏุซ ูููุฐุฌ
                    max_tokens=1000,
                    temperature=0.7,
                    messages=[
                        {
                            "role": "user",
                            "content": [
                                {
                                    "type": "text",
                                    "text": (
                                        "ุฃูุช ูุญูู ุดุญูุงุช ุฎุจูุฑ. ูู ุจุชุญููู ุตูุฑุฉ ุงูุดุญูุฉ ูุงุณุชุฎุฑุงุฌ ุงููุนูููุงุช ุงููููุฉ ุงูุชุงููุฉ:\n"
                                        "1. ุงุณู ุงูุนููู\n"
                                        "2. ุฑูู ุงููุงุชู\n"
                                        "3. ุชุงุฑูุฎ ุงูุดุญู\n"
                                        "4. ูุฌูุฉ ุงูุดุญูุฉ\n"
                                        "5. ูููุฉ ุงูุดุญูุฉ\n\n"
                                        "ูุฏู ุชุญูููุงู ููุตูุงู ููุญุชูู ุงูุตูุฑุฉ. ุฑูุฒ ุนูู ุงููุนูููุงุช ุงููุชุนููุฉ ุจุงูุดุญูุฉ."
                                    )
                                },
                                {
                                    "type": "image",
                                    "source": {
                                        "type": "base64",
                                        "media_type": "image/jpeg",
                                        "data": base64_image
                                    }
                                }
                            ]
                        }
                    ]
                )
                
                return response.content[0].text
            except Exception as e:
                logger.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงุณุชุฎุฏุงู Anthropic: {e}")
        
        # ุฅุฐุง ูุดูุช ุฌููุน ุงููุญุงููุงุชุ ุฃุฑุฌุน ุฑุณุงูุฉ ุงูุชุฑุงุถูุฉ
        return "ุนุฐุฑุงูุ ูู ุฃุชููู ูู ุชุญููู ุงูุตูุฑุฉ. ุงูุฑุฌุงุก ุงูุชุฃูุฏ ูู ุฃู ุงูุตูุฑุฉ ูุงุถุญุฉ ูููุฑูุกุฉ."
    
    except Exception as e:
        logger.error(f"ุญุฏุซ ุฎุทุฃ ุนุงู ุฃุซูุงุก ุชุญููู ุงูุตูุฑุฉ: {e}")
        return "ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ุงูุตูุฑุฉ. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ูุงุญูุงู."

def extract_shipping_info(analysis_text: str) -> Dict[str, str]:
    """
    ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ุงูุดุญูุฉ ูู ูุต ุงูุชุญููู
    
    ุงููุนููุงุช:
        analysis_text: ูุต ุงูุชุญููู
        
    ุงูุนุงุฆุฏ:
        ูุงููุณ ูุญุชูู ุนูู ุงููุนูููุงุช ุงููุณุชุฎุฑุฌุฉ
    """
    extracted_data = {}
    
    # ุฃููุงุท ุงูุชุนุฑู ุนูู ุงูุจูุงูุงุช
    name_patterns = [
        r"ุงุณู ุงูุนููู:?\s*([^\n:;,ุ]+)",
        r"ุงุณู ุงููุณุชูู:?\s*([^\n:;,ุ]+)",
        r"ุงูุนููู:?\s*([^\n:;,ุ]+)",
        r"ุงููุณุชูู:?\s*([^\n:;,ุ]+)",
        r"ุงุณู:?\s*([^\n:;,ุ]+)",
    ]
    
    phone_patterns = [
        r"ุฑูู ุงููุงุชู:?\s*([+\d\s\-()]+)",
        r"ุงููุงุชู:?\s*([+\d\s\-()]+)",
        r"ุฑูู ุงูุฌูุงู:?\s*([+\d\s\-()]+)",
        r"ุงูุฌูุงู:?\s*([+\d\s\-()]+)",
        r"ุฑูู:?\s*([+\d\s\-()]+)",
        r"(\+?90\d{10})",
        r"(\+?963\d{9})",
        r"(\d{10,11})",
    ]
    
    date_patterns = [
        r"ุชุงุฑูุฎ ุงูุดุญู:?\s*([^\n:;,ุ]+)",
        r"ุชุงุฑูุฎ:?\s*([^\n:;,ุ]+)",
        r"(\d{4}-\d{2}-\d{2})",
        r"(\d{2}/\d{2}/\d{4})",
        r"(\d{2}-\d{2}-\d{4})",
    ]
    
    destination_patterns = [
        r"ูุฌูุฉ ุงูุดุญูุฉ:?\s*([^\n:;,ุ]+)",
        r"ุงููุฌูุฉ:?\s*([^\n:;,ุ]+)",
        r"ุงููุฏููุฉ:?\s*([^\n:;,ุ]+)",
        r"ุงูุนููุงู:?\s*([^\n:;,ุ]+)",
        r"ูุฏููุฉ:?\s*([^\n:;,ุ]+)",
    ]
    
    value_patterns = [
        r"ูููุฉ ุงูุดุญูุฉ:?\s*([^\n:;,ุ]+)",
        r"ูููุฉ:?\s*([^\n:;,ุ]+)",
        r"ุงููุจูุบ:?\s*([^\n:;,ุ]+)",
        r"ุงูุณุนุฑ:?\s*([^\n:;,ุ]+)",
        r"(\d+(?:,\d+)*(?:\.\d+)?\s*(?:ููุฑุฉ|ู\.ุณ|ุฏููุงุฑ|\$|TL|โบ))",
    ]
    
    # ุงุณู ุงูุนููู
    for pattern in name_patterns:
        matches = re.search(pattern, analysis_text, re.IGNORECASE | re.MULTILINE)
        if matches:
            customer_name = matches.group(1).strip()
            if 3 <= len(customer_name) <= 50:  # ุงูุชุญูู ูู ุฃู ุงูุงุณู ููุทูู
                extracted_data["customer_name"] = customer_name
                break
    
    # ุฑูู ุงููุงุชู
    for pattern in phone_patterns:
        matches = re.search(pattern, analysis_text, re.IGNORECASE | re.MULTILINE)
        if matches:
            phone_number = matches.group(1).strip()
            # ุชูุธูู ุฑูู ุงููุงุชู
            phone_number = ''.join(filter(lambda x: x.isdigit() or x == '+', phone_number))
            
            # ุฅุถุงูุฉ ุฑูุฒ ุงูุจูุฏ ุฅุฐุง ูุฒู ุงูุฃูุฑ
            if phone_number.startswith("09") or phone_number.startswith("9"):
                # ุฅุถุงูุฉ ุฑูุฒ ุงูุจูุฏ ูุณูุฑูุง
                if phone_number.startswith("0"):
                    phone_number = "+963" + phone_number[1:]
                else:
                    phone_number = "+963" + phone_number
            elif phone_number.startswith("05") or phone_number.startswith("5"):
                # ุฅุถุงูุฉ ุฑูุฒ ุงูุจูุฏ ูุชุฑููุง
                if phone_number.startswith("0"):
                    phone_number = "+90" + phone_number[1:]
                else:
                    phone_number = "+90" + phone_number
            
            extracted_data["phone_number"] = phone_number
            break
    
    # ุชุงุฑูุฎ ุงูุดุญู
    for pattern in date_patterns:
        matches = re.search(pattern, analysis_text, re.IGNORECASE | re.MULTILINE)
        if matches:
            shipping_date = matches.group(1).strip()
            extracted_data["shipping_date"] = shipping_date
            break
    
    # ูุฌูุฉ ุงูุดุญูุฉ
    for pattern in destination_patterns:
        matches = re.search(pattern, analysis_text, re.IGNORECASE | re.MULTILINE)
        if matches:
            destination = matches.group(1).strip()
            extracted_data["destination"] = destination
            break
    
    # ูููุฉ ุงูุดุญูุฉ
    for pattern in value_patterns:
        matches = re.search(pattern, analysis_text, re.IGNORECASE | re.MULTILINE)
        if matches:
            value = matches.group(1).strip()
            extracted_data["value"] = value
            break
    
    return extracted_data

def extract_phone_numbers(text: str) -> List[str]:
    """
    ุงุณุชุฎุฑุงุฌ ุฃุฑูุงู ุงูููุงุชู ูู ุงููุต
    
    ุงููุนููุงุช:
        text: ุงููุต ุงููุฑุงุฏ ุงูุจุญุซ ููู
        
    ุงูุนุงุฆุฏ:
        ูุงุฆูุฉ ุจุฃุฑูุงู ุงูููุงุชู ุงููุณุชุฎุฑุฌุฉ
    """
    phone_patterns = [
        r"\+?90\d{10}",  # ุฑูู ุชุฑูู ูุน ุฑูุฒ ุงูุจูุฏ
        r"\+?963\d{9}",  # ุฑูู ุณูุฑู ูุน ุฑูุฒ ุงูุจูุฏ
        r"0?9\d{8}",     # ุฑูู ุณูุฑู ุจุฏูู ุฑูุฒ ุงูุจูุฏ
        r"0?5\d{9}",     # ุฑูู ุชุฑูู ุจุฏูู ุฑูุฒ ุงูุจูุฏ
        r"\d{10,11}",    # ุฃู ุฑูู ูุงุชู ุนุงู
    ]
    
    phone_numbers = []
    
    for pattern in phone_patterns:
        matches = re.findall(pattern, text)
        if matches:
            for match in matches:
                # ุชูุธูู ุฑูู ุงููุงุชู
                phone_number = ''.join(filter(lambda x: x.isdigit() or x == '+', match))
                
                # ุฅุถุงูุฉ ุฑูุฒ ุงูุจูุฏ ุฅุฐุง ูุฒู ุงูุฃูุฑ
                if phone_number.startswith("09") or phone_number.startswith("9"):
                    # ุฅุถุงูุฉ ุฑูุฒ ุงูุจูุฏ ูุณูุฑูุง
                    if phone_number.startswith("0"):
                        phone_number = "+963" + phone_number[1:]
                    else:
                        phone_number = "+963" + phone_number
                elif phone_number.startswith("05") or phone_number.startswith("5"):
                    # ุฅุถุงูุฉ ุฑูุฒ ุงูุจูุฏ ูุชุฑููุง
                    if phone_number.startswith("0"):
                        phone_number = "+90" + phone_number[1:]
                    else:
                        phone_number = "+90" + phone_number
                
                if phone_number not in phone_numbers:
                    phone_numbers.append(phone_number)
    
    return phone_numbers

def get_ai_handlers() -> List[Any]:
    """
    ุงูุญุตูู ุนูู ุฌููุน ูุนุงูุฌุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู
    
    ุงูุนุงุฆุฏ:
        ูุงุฆูุฉ ุจูุนุงูุฌุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู
    """
    # ูุนุงูุฌ ุงููุญุงุฏุซุฉ ููุฐูุงุก ุงูุงุตุทูุงุนู
    ai_conversation_handler = ConversationHandler(
        entry_points=[
            CommandHandler("ai", ai_command),
            CallbackQueryHandler(handle_ai_callback, pattern="^ai_")
        ],
        states={
            WAITING_FOR_CHAT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_chat_message),
                CallbackQueryHandler(handle_ai_callback, pattern="^ai_")
            ],
            WAITING_FOR_IMAGE: [
                MessageHandler(filters.PHOTO, handle_image_message),
                CallbackQueryHandler(handle_ai_callback, pattern="^ai_")
            ],
            WAITING_FOR_EXTRACTION_CONFIRMATION: [
                CallbackQueryHandler(handle_ai_callback, pattern="^extract_")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_command)],
    )
    
    # ูุนุงูุฌ ุชุญููู ุงูุตูุฑ ุงููุจุงุดุฑ
    direct_image_handler = MessageHandler(
        filters.PHOTO & ~filters.COMMAND,
        handle_image_message
    )
    
    # ูุงุฆูุฉ ุจุฌููุน ูุนุงูุฌุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู
    handlers = [
        # ูุนุงูุฌ ุงููุญุงุฏุซุฉ ููุฐูุงุก ุงูุงุตุทูุงุนู
        ai_conversation_handler,
        
        # ูุนุงูุฌ ุชุญููู ุงูุตูุฑ ุงููุจุงุดุฑ
        # ููุงุญุธุฉ: ูุฌุจ ุฃู ูููู ูุฐุง ุงููุนุงูุฌ ุขุฎุฑ ูุนุงูุฌ ูู ุงููุงุฆูุฉ ูุชุฌูุจ ุงูุชุฏุงุฎู ูุน ุงููุนุงูุฌุงุช ุงูุฃุฎุฑู
        # direct_image_handler
    ]
    
    return handlers